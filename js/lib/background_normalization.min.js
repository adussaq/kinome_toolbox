!function(t){"use strict";var n,e,o,r={total:0,done:0};o=function(t){return function(n){return[n,t]}},e=function(t){var n,e,o,r,a,i,u,d=t.list("exposures");for(o=function(t){var n=1/0;return t.background_valid&&(n=Math.min(n,t.background)),t.signal_valid&&Math.min(n,t.signal),n},r=function(t,n){return"number"==typeof t&&"number"==typeof n?Math.min(t,n):"number"==typeof t?t:"number"==typeof n?n:1/0},i=t.list("cycles").reduce(r),n=0;n<d.length;n+=1)for(a=(u=t.get({cycle:i,exposure:d[n]})).map(o).reduce(r),u=t.get({exposure:d[n]}),e=0;e<u.length;e+=1)u[e].set("signal",u[e].signal-a),u[e].set("background",u[e].background-a);return t},n=function(t){return new Promise(function(n,a){t.data&&"object"==typeof t.data||a("Data object not added in. This will not work without it."),t.amd_ww&&"object"==typeof t.amd_ww||a("AMD_WW object not added in. This will not work without it."),t.worker&&"string"==typeof t.worker||a("String for worker url not added in. This will not work without it."),Array.isArray(t.data)||(t.data=[t.data]);var i,u,d;d=t.number_threads||void 0,u=t.amd_ww.start({filename:t.worker,num_workers:d}),console.log("\nStarting fits for background normalization.\n"),i=Promise.all(t.data.map(o(u))).catch(function(t){a({message:"Background normalization failed:",error:t})}),t.hasOwnProperty("update")&&"function"==typeof t.update&&t.update(r),i.then(function(t){t=t.map(e),n(t)}).catch(function(t){a(t)})})},t.normalize_background=n}("undefined"!=typeof module&&module.exports?module.exports:KINOME);