{
    name: 'hyperbolic_3_parameter',
    stringified: "y(c) = [Ymax · vi · (c - c0)] / [Ymax + vi · (c - c0)]",
    func: function (xVector, P) {
        return (1 / (1 / (P[0] * (xVector[0] - P[1])) + 1 / P[2]));
    },
    setInitial: function (x_vector, y_values) {
        var vi, Ym, c, yMax, x_inv = [], y_inv = [], ysum = 0, xsum = 0, x2sum = 0, y2sum = 0, xysum = 0, n;

        yMax = Math.max.apply(null, y_values);
        //Only used as a back up.
        yMax = yMax > 200 
            ? yMax / 1.5
            : yMax;

        //assume c is 25.2 (average from big group)
        c = 25.2;

        //for all possible values transform the data to linerize it.
        for (i = 0; i < x_vector.length; i += 1) {
            // non 0
            if (x_vector[i][0] - c && y_values[i]) {
                x_inv.push(1 / (x_vector[i][0] - c));
                y_inv.push(1 / y_values[i]);
            }
        }


        n = x_inv.length;
        //Now linear fit transformed values that remain
        for (i = 0; i < n; i += 1) {
            ysum += y_inv[i];
            xsum += x_inv[i];
            x2sum += x_inv[i] * x_inv[i];
            y2sum += y_inv[i] * y_inv[i];
            xysum += x_inv[i] * y_inv[i];
        }

        vi = (xysum - xsum * ysum / n) / (x2sum - xsum * xsum / n);
        Ym = (ysum - vi * xsum) / n;

        if (vi === 0) {
            //if it cannot be inverted, then give it a large value for typical domain
            vi = 90;
        } else {
            vi = 1 / vi;
        }
        if (vi < 0.5) {
            vi = 0.5;
        }


        if (Ym === 0) {
            Ym = 4000;
        } else {
            Ym = 1 / Ym;
        }
        if (Ym < 20) {
            Ym = yMax * 1.6974;
        }
 
        return [vi, c, Ym];
    },
    description: 'Equation for fitting kinetic data.',
    mathType: "y(c)={y_{max}·v_{i}·(c-c_0)}/{y_{max}+v_{i}·(c-c_0)}",
    mathParams: ['v_i', 'c_0', 'y_{max}'],
    displayEq: function (params) {
        return "y(c)={" + (params[2]).toPrecision(5) + " · " + (params[0]).toFixed(3) + " · (c - " + (params[1]).toFixed(3)  + ")}/{" + (params[2]).toPrecision(5) +  " + " + (params[0]).toFixed(3) + " · (c - " + (params[1]).toFixed(3)  + ")}";
    }
}